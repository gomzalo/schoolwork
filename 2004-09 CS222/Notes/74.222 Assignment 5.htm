<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html>
<head>
  <title>74.222 Assignment 5</title>
</head>
  <body>

<div align="center">
<h3>74.222 - Assembly Language Programming - Spring 2004</h3>

<h2>Assignment 5</h2>
</div>

<h3>Due dates: Wednesday, Apr. 7 (L01), Thursday, Apr. 8 (L02)</h3>
<h3>Handing in:</h3>

<ul>
  <li>Observe <a href="../AssnStand.html">Assignment Standards</a>
  <li>Include an <a href="http://www.cs.umanitoba.ca/newsite/honesty.html">honesty declaration</a>.
  <li>68K programming
  <ul>
    <li>Use the 68000 Simulator <tt>BSVC</tt> for Question 1.
    <li>Use the routines in <tt>68kIO.s</tt> for all I/O.
    <li>Print the source program once (the <tt>.s</tt> file)
	and print the output file
        <tt>68kout.txt</tt> for each test run of your program.
    <li>for subroutines, follow the conventions in the course notes, including:
    <ul>
      <li>Put all input parameters on the stack.
      <li>Return values are put into register D0 or A0 as appropriate.
      <li>Use register A6 as the frame pointer.
    </ul>
  </ul>
  <li>SPARC programming
  <ul>
    <li>Use the routines in <tt>SparcIO.c</tt> for all I/O.
    <li>Print the source program once (the <tt>.s</tt> file)
	and use file redirection for the program input and to
	obtain the output in a file.
  </ul>
</ul>


<hr width="100%" size="2" align="left">

<ol>
<!-- Question 1 -->
<li>
[10 marks]
Write a 68K Simulator program that will print a table of the first 21
Fibonacci numbers from f(0) to f(20). Your program will contain a
subroutine called <tt>fibonacci</tt> that takes a single parameter
and returns the corresponding Fibonacci number.
<p>
Fibonacci numbers are usually defined recursively, like so:
<pre>
f(0) = 0
f(1) = 1
f(n) = f(n-1) + f(n-2), for n >= 2</pre>
However, your subroutine should find the Fibonacci number iteratively. The
subroutine will need to keep track of only the previous two values to find
the next one.
</p>

<!-- Question 2 -->
<li>
<p>
[10 marks]
Write a 68K simulator program that contains a <em>recursive</em> subroutine
to find the GCD of two numbers. As in Assignment 3 Question 2, it should
prompt for and read the two numbers from the keyboard. It should read values
and find their GCD until a zero value is entered.
<strong>Note:</strong> You may use your own solution for Assignment 3
Question 2 as a starting point for this question, or the Sample Solution
posted on the Assignments page.
</p>
<p>
The GCD is defined recursively as follows:
<pre>GDC(a, b)
    if(a % b == 0) return b
    else return GCD(b, a % b)
</pre>
</p>
<p>
Test your program on:
(10, 25), (60, 15), (20, 20), (1, 100) and (1200, 960).  You are not
allowed to change the order of the numbers in the pairings.
</p>

<!-- Question 3 -->
<li>
<p>
[20 marks]
Write a SPARC program that implements a linked list data structure and some
operations on it. Each operation will be implemented as a subroutine. This
question is fairly complex, so you may want to use a high level language
implementation as a guide. You can obtain part marks for implementing only
some of the operations, as described below.
</p>
<p>
The list will be composed of <em>Student</em> nodes. A Student node consists of:
<ul>
  <li>Student Number, an integer (4 bytes)</li>
  <li>Student Name, a character string (30 bytes plus 1 for the terminating <tt>null</tt>)</li>
  <li>Faculty code, an integer (1 byte)</li>
  <li>Link, an address (4 bytes)</li>
</ul>
The Key value for this list is Student Number.
</p>
<p>
We will let the Operating System manage dynamic memory for us by using the
<tt>malloc</tt> and <tt>free</tt> system calls. Malloc accepts one parameter,
the number of bytes requested, and returns the address of the dynamically
allocated block of memory (if the allocation was successful) or else <tt>null</tt>
(if the allocation was not successful). Free accepts one parameter, the address
of a previously allocated block of memory, and returns that block to the pool
of available memory. Note that you should check the value returned by malloc
and if the allocation was unsuccessful, you should print an error message
and exit the program.
</p>
Malloc will always return a block of memory that is double-word aligned. This is
important since it means you can arrange the fields in your Student node in
whatever order you like and the first field will be properly aligned. However,
you still must ensure the other fields will be properly aligned. The Student
node as described above contains 40 bytes, so you should order the fields
appropriately to ensure proper alignment. You should declare symbolic constants
for the offsets (from the start of the memory block) to each of the fields.
</p>
<p>
Here are the operations your program should implement:
<ol>
  <li><b>Create</b> - create a new linked list. The input to Create will be:
      <ol type=i>
        <li>The number of Students to be input.</li>
        <li>The data for each Student (Student Number first, then Name, then
            Faculty code).</li>
      </ol>
      </li>
  <li><b>Print</b> - Print the list of Students. Note that instead of printing
      the Faculty code, you will print the actual Faculty Name, which will be
      one of the names in the table below:
      <table border>
        <tr><th>Code</th><th>Faculty Name</th></tr>
        <tr align="center"><td>0</td><td>Arts</td></tr>
        <tr align="center"><td>1</td><td>Business Admin.</td></tr>
        <tr align="center"><td>2</td><td>Engineering</td></tr>
        <tr align="center"><td>3</td><td>Human Ecology</td></tr>
        <tr align="center"><td>4</td><td>Science</td></tr>
        <tr align="center"><td>5</td><td>University I</td></tr>
      </table>

      </li>
  <li><b>Add</b> - Add a Student to the list. The input to Add will be data for
      a single Student, in the same order as for Create.</li>
  <li><b>Delete</b> - Delete a Student from the list. Input to Delete is a
      Student number, and output is a pointer to the deleted node (if the
      Student was found) or else <tt>null</tt> (if the Student was not found).
      You must deallocate the deleted node using <tt>free</tt>.</li>
  <li><b>Modify</b> - Modify the fields for a Student with the specified Student
      number. The input to Modify is the same as for Add, i.e. an entire Student
      record will be input. Output is a pointer to the modified node (if the
      Student was found) or else <tt>null</tt> (if the Student was not found).
      It is acceptable to create a new node and simply replace the existing
      node in the list (don't forget to deallocate the old node).</li>
</ol>
<p>
Write a mainline that will prompt for a single-character operation code
(C, P, A, D, M or Q) and perform the specified operation until (Q)uit is entered.
For any operations that you don't manage to implement, simply print a message
stating that the operation is unimplemented.
Use file redirection to take input from the 
<a href="A5Q3data.txt">test file</a>. 
</p>
<h4>Marking</h4>
Your program will be marked based on which subroutines you are successful
in implementing. Use the guide below to help you determine which subroutines
to tackle first.
<ol type=i>
  <li>12 marks: create and print an <em>unordered</em> list.</li>
  <li>14 marks: create and print an <em>ordered</em> list.</li>
  <li>16 marks: implement Add.</li>
  <li>18 marks: implement Delete.</li>
  <li>20 marks: implement Modify.</li>
</ol>
<h4>Hints</h4>
<ol>
  <li>You may choose to use a dummy node at the head of the list to eliminate
      special case code.</li>
  <li>You may also choose (though it is not a requirement) to write other
      subroutines to implement tasks that are common to several operations.
      For example, you may find a subroutine that reads data for a single
      Student, builds a Student node and returns a pointer to that node
      useful in several operations.</li>
</ol>
<p>
</p>
</ol>
</body>
</html>
